[{"D:\\node\\weather-app\\src\\index.js":"1","D:\\node\\weather-app\\src\\reportWebVitals.js":"2","D:\\node\\weather-app\\src\\App.js":"3","D:\\node\\weather-app\\src\\page\\Home.js":"4","D:\\node\\weather-app\\src\\components\\Weather.js":"5","D:\\node\\weather-app\\src\\components\\WeatherCustomCard.js":"6"},{"size":500,"mtime":1610032901297,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610032901297,"results":"9","hashOfConfig":"8"},{"size":204,"mtime":1611134400617,"results":"10","hashOfConfig":"8"},{"size":1158,"mtime":1614017550557,"results":"11","hashOfConfig":"8"},{"size":4201,"mtime":1614019051511,"results":"12","hashOfConfig":"8"},{"size":1592,"mtime":1614017244959,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"va31uv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\node\\weather-app\\src\\index.js",[],["28","29"],"D:\\node\\weather-app\\src\\reportWebVitals.js",[],"D:\\node\\weather-app\\src\\App.js",[],"D:\\node\\weather-app\\src\\page\\Home.js",[],"D:\\node\\weather-app\\src\\components\\Weather.js",["30"],"import * as React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Space, Input, Alert, Spin } from \"antd\";\r\nimport { WeatherCustomCard } from \"./WeatherCustomCard\";\r\n\r\nconst { Search } = Input;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  isLoaded: false,\r\n  weather: [],\r\n  alert: false,\r\n  error: [],\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"WEATHER/LOADING\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case \"WEATHER/LOADED\":\r\n      return {\r\n        ...state,\r\n        alert: false,\r\n        error: [],\r\n        isLoading: false,\r\n        isLoaded: true,\r\n        weather: action.payload,\r\n      };\r\n    case \"WEATHER/LOADING_FAIL\":\r\n    case \"WEATHER/ERROR\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        alert: true,\r\n        error: action.payload,\r\n      };\r\n    case \"WEATHER/ALERT_CLOSE\":\r\n      return { ...state, alert: false };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nexport const Weather = () => {\r\n  //weather const\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n  //config\r\n  const URL_POSITION = \"http://api.openweathermap.org/data/2.5/weather?\"; //lat=61&lon=105\r\n  const URL_CITY = \"http://api.openweathermap.org/data/2.5/weather?q=\";\r\n  const apiKey = \"&appid=4767a8f4b28c4e47ab7a7bca73daf5a9&units=metric\";\r\n\r\n  //api\r\n  const apiWeatherPosition = (position) => {\r\n    dispatch({ type: \"WEATHER/LOADING\" });\r\n    axios\r\n      .get(\r\n        `${URL_POSITION}lat=${position.coords.latitude}&lon=${position.coords.longitude}${apiKey}`\r\n      )\r\n      .then((response) => {\r\n        dispatch({ type: \"WEATHER/LOADED\", payload: response.data });\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        dispatch({\r\n          type: \"WEATHER/LOADING_FAIL\",\r\n          payload: error.response.data,\r\n        });\r\n      });\r\n  };\r\n  const apiWeatherCityName = (cityName) => {\r\n    dispatch({ type: \"WEATHER/LOADING\" });\r\n    axios\r\n      .get(`${URL_CITY}+${cityName}+${apiKey}`)\r\n      .then((response) => {\r\n        dispatch({ type: \"WEATHER/LOADED\", payload: response.data });\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        dispatch({\r\n          type: \"WEATHER/LOADING_FAIL\",\r\n          payload: error.response.data,\r\n        });\r\n      });\r\n  };\r\n\r\n  //position use lat&lon\r\n  const success = (position) => {\r\n    apiWeatherPosition(position);\r\n  };\r\n  const error = (error) => {\r\n    console.log(error);\r\n    dispatch({ type: \"WEATHER/ERROR\", payload: error });\r\n  };\r\n  const getPosition = () => {\r\n    navigator.geolocation.getCurrentPosition(success, error);\r\n  };\r\n\r\n  //input action\r\n  const onSearchInput = (cityName) => {\r\n    console.log(`search ${cityName}`);\r\n    apiWeatherCityName(cityName);\r\n  };\r\n  const onBlur = () => {\r\n    console.log(\"blur\");\r\n  };\r\n  const onFocus = () => {\r\n    console.log(\"focus\");\r\n  };\r\n\r\n  // alert close\r\n  const handleClose = () => {\r\n    dispatch({ type: \"WEATHER/ALERT_CLOSE\" });\r\n  };\r\n\r\n  //effect lat=61&lon=105\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      getPosition();\r\n    }, 600);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Space align=\"center\">\r\n        <Search\r\n          style={{ width: 200 }}\r\n          placeholder=\"input name city\"\r\n          onFocus={onFocus}\r\n          onBlur={onBlur}\r\n          onSearch={onSearchInput}\r\n        />\r\n      </Space>\r\n      <Space style={{ paddingBlock: \"12px\" }} align=\"center\">\r\n        {!state.alert ? null : (\r\n          <>\r\n            <Alert\r\n              message={state.error.message}\r\n              type=\"warning\"\r\n              showIcon\r\n              banner\r\n              closable\r\n              afterClose={handleClose}\r\n            />\r\n          </>\r\n        )}\r\n      </Space>\r\n      <Space>\r\n        <>\r\n          <Spin\r\n            style={{\r\n              paddingTop: \"48px\",\r\n            }}\r\n            size=\"large\"\r\n            spinning={state.isLoading}\r\n          >\r\n            <WeatherCustomCard\r\n              weather={state.weather}\r\n              isLoaded={state.isLoaded}\r\n            />\r\n          </Spin>\r\n        </>\r\n      </Space>\r\n    </>\r\n  );\r\n};\r\n","D:\\node\\weather-app\\src\\components\\WeatherCustomCard.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":124,"column":6,"nodeType":"37","endLine":124,"endColumn":8,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getPosition'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [getPosition]",{"range":"44","text":"45"},[3165,3167],"[getPosition]"]